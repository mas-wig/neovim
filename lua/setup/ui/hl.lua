local cl = require("setup.ui.colors")

return {
	-- Diagnostic
	DiagnosticVirtualTextError = { bg = cl.none, fg = cl.red },
	DiagnosticVirtualTextWarn = { bg = cl.none, fg = cl.yellow },
	DiagnosticVirtualTextInfo = { bg = cl.none, fg = cl.green },
	DiagnosticVirtualTextHint = { bg = cl.none, fg = cl.blue },

	-- General
	LineNr = { fg = cl.blue, bold = true },
	CursorLineNr = { fg = cl.yellow2, bold = true },
	NvimInternalError = { fg = cl.red },
	WinSeparator = { fg = cl.green },
	Pmenu = { fg = cl.line },
	PmenuSbar = { bg = cl.one_bg },
	PmenuSel = { bg = cl.dark_purple, fg = cl.black },
	PmenuThumb = { bg = cl.grey },
	Comment = { fg = cl.grey_fg },
	FloatBorder = { fg = cl.line },
	NormalFloat = { bg = cl.none },

	TreesitterContext = { bg = cl.none },

	-- Dev Icon Highlight
	DevIconDefault = { fg = cl.red },
	DevIconc = { fg = cl.blue },
	DevIconcss = { fg = cl.blue },
	DevIcondeb = { fg = cl.cyan },
	DevIconDockerfile = { fg = cl.cyan },
	DevIconhtml = { fg = cl.baby_pink },
	DevIconjpeg = { fg = cl.dark_purple },
	DevIconjpg = { fg = cl.dark_purple },
	DevIconjs = { fg = cl.sun },
	DevIconkt = { fg = cl.orange },
	DevIconlock = { fg = cl.red },
	DevIconlua = { fg = cl.blue },
	DevIconmp3 = { fg = cl.white },
	DevIconmp4 = { fg = cl.white },
	DevIconout = { fg = cl.white },
	DevIconpng = { fg = cl.dark_purple },
	DevIconpy = { fg = cl.cyan },
	DevIcontoml = { fg = cl.blue },
	DevIconts = { fg = cl.teal },
	DevIconttf = { fg = cl.white },
	DevIconrb = { fg = cl.pink },
	DevIconrpm = { fg = cl.orange },
	DevIconvue = { fg = cl.vibrant_green },
	DevIconwoff = { fg = cl.white },
	DevIconwoff2 = { fg = cl.white },
	DevIconxz = { fg = cl.sun },
	DevIconzip = { fg = cl.sun },
	DevIconZig = { fg = cl.orange },
	DevIconMd = { fg = cl.blue },
	DevIconTSX = { fg = cl.blue },
	DevIconJSX = { fg = cl.blue },
	DevIconSvelte = { fg = cl.red },
	DevIconJava = { fg = cl.orange },

	-- Mason
	MasonHeader = { bg = cl.red, fg = cl.black },
	MasonHighlight = { fg = cl.blue },
	MasonHighlightBlock = { fg = cl.black, bg = cl.green },
	MasonHighlightBlockBold = { link = "MasonHighlightBlock" },
	MasonHeaderSecondary = { link = "MasonHighlightBlock" },
	MasonMuted = { fg = cl.light_grey },
	MasonMutedBlock = { fg = cl.light_grey, bg = cl.one_bg },

	-- Telescope
	TelescopePromptTitle = { fg = cl.black, bg = cl.red, bold = true },
	TelescopeSelection = { bg = cl.black2, fg = cl.white },
	TelescopeResultsDiffAdd = { fg = cl.green },
	TelescopeResultsDiffChange = { fg = cl.yellow },
	TelescopeResultsDiffDelete = { fg = cl.red },
	TelescopeBorder = { fg = cl.one_bg3 },
	TelescopePromptBorder = { fg = cl.one_bg3 },
	TelescopeResultsTitle = { fg = cl.black, bg = cl.green, bold = true },
	TelescopePreviewTitle = { fg = cl.black, bg = cl.blue, bold = true },
	TelescopePromptPrefix = { fg = cl.red, bg = cl.none, bold = true },
	TelescopeNormal = { bg = cl.none },
	TelescopePromptNormal = { bg = cl.none },

	-- Notify
	NotifyERRORBorder = { fg = cl.red },
	NotifyERRORIcon = { fg = cl.red },
	NotifyERRORTitle = { fg = cl.red },
	NotifyWARNBorder = { fg = cl.orange },
	NotifyWARNIcon = { fg = cl.orange },
	NotifyWARNTitle = { fg = cl.orange },
	NotifyINFOBorder = { fg = cl.green },
	NotifyINFOIcon = { fg = cl.green },
	NotifyINFOTitle = { fg = cl.green },
	NotifyDEBUGBorder = { fg = cl.grey },
	NotifyDEBUGIcon = { fg = cl.grey },
	NotifyDEBUGTitle = { fg = cl.grey },
	NotifyTRACEBorder = { fg = cl.purple },
	NotifyTRACEIcon = { fg = cl.purple },
	NotifyTRACETitle = { fg = cl.purple },

	-- Syntax
	["@comment"] = { link = "Comment" },
	["@comment.documentation"] = { link = "Comment" },
	["@error"] = { link = "Error" },
	["@operator"] = { link = "Operator" },
	["@punctuation.delimiter"] = { fg = cl.fg, bg = cl.none },
	["@punctuation.delimiter.cpp"] = { fg = cl.cyan, bg = cl.none },
	["@punctuation.delimiter.yaml"] = { fg = cl.cyan, bg = cl.none },
	["@punctuation.bracket"] = { fg = cl.purple, bg = cl.none },
	["@punctuation.special"] = { fg = cl.purple, bg = cl.none },
	["@string"] = { link = "String" },
	["@string.regex"] = { fg = cl.red, bg = cl.none },
	["@string.escape"] = { fg = cl.purple, bg = cl.none },
	["@string.special"] = { fg = cl.purple, bg = cl.none },
	["@character"] = { link = "@string" },
	["@character.special"] = { fg = cl.yellow, bg = cl.none },
	["@function"] = { link = "Function" },
	["@function.builtin"] = { link = "@function" },
	["@function.call"] = { link = "@function" },
	["@method"] = { link = "@function" },
	["@method.call"] = { link = "@function" },
	["@constructor"] = { fg = cl.purple, bg = cl.none },
	["@constructor.c_sharp"] = { link = "@type" },
	["@constructor.php"] = { link = "@type" },
	["@constructor.tsx"] = { fg = cl.green, bg = cl.none },
	["@constructor.javascript"] = { fg = cl.green, bg = cl.none },
	["@parameter"] = { fg = cl.orange, bg = cl.none, italic = true },
	["@boolean"] = { link = "Boolean" },
	["@number"] = { link = "Number" },
	["@float"] = { link = "Float" },
	["@label.json"] = { fg = cl.cyan, bg = cl.none },
	["@label.ruby"] = { link = "@variable.builtin" },
	["@exception"] = { link = "Exception" },
	["@type"] = { link = "Type" },
	["@type.dart"] = { link = "@type" },
	["@type.builtin"] = { link = "Type" },
	["@type.builtin.cpp"] = { link = "Type" },
	["@type.definition"] = { link = "Type" },
	["@type.qualifier"] = { fg = cl.cyan, bg = cl.none },
	["@storageclass"] = { fg = cl.cyan, bg = cl.none },
	["@attribute"] = { fg = cl.yellow, bg = cl.none, italic = true },
	["@field"] = { fg = cl.cyan, bg = cl.none },
	["@field.yaml"] = { fg = cl.cyan, bg = cl.none },
	["@property"] = { link = "@field" },
	["@property.css"] = { fg = cl.cyan, bg = cl.none },
	["@variable"] = { fg = cl.fg, bg = cl.none },
	["@variable.builtin"] = { fg = cl.purple, bg = cl.none, italic = true },
	["@variable.global.ruby"] = { link = "@constant" },
	["@constant"] = { link = "Constant" },
	["@constant.builtin"] = { link = "Constant" },
	["@constant.macro"] = { link = "Constant" },
	["@namespace"] = { fg = cl.fg, bg = cl.none },
	["@symbol"] = { fg = cl.purple, bg = cl.none },
	["@text"] = { fg = cl.fg, bg = cl.none },
	["@text.strong"] = { fg = cl.orange, bg = cl.none, bold = true },
	["@text.emphasis"] = { fg = cl.green, bg = cl.none, italic = true },
	["@text.strike"] = { fg = cl.yellow, bg = cl.none, strikethrough = true },
	["@text.title"] = { fg = cl.cyan, bg = cl.none, bold = true },
	["@text.literal"] = { link = "@text" },
	["@text.quote"] = { fg = cl.yellow, bg = cl.none },
	["@text.uri"] = { fg = cl.cyan, bg = cl.none },
	["@text.math"] = { fg = cl.cyan, bg = cl.none },
	["@text.reference"] = { fg = cl.cyan, bg = cl.none },
	["@text.todo"] = { link = "Todo" },
	["@text.warning"] = { link = "WarningMsg" },
	["@text.danger"] = { link = "ErrorMsg" },
	["@text.diff.add"] = { link = "DiffAdd" },
	["@text.diff.delete"] = { link = "DiffDelete" },
	["@tag"] = { fg = cl.green, bg = cl.none },
	["@tag.attribute"] = { link = "@field" },
	["@tag.delimiter"] = { fg = cl.cyan, bg = cl.none },

	-- Semantic
	["@lsp.type.namespace"] = { link = "@namespace" },
	["@lsp.type.type"] = { link = "@type" },
	["@lsp.type.typeParameter"] = { link = "@type" },
	["@lsp.type.class"] = { link = "@type" },
	["@lsp.type.enum"] = { link = "@type" },
	["@lsp.type.interface"] = { link = "@type" },
	["@lsp.type.struct"] = { link = "Structure" },
	["@lsp.type.parameter"] = { link = "@parameter" },
	["@lsp.type.variable"] = { link = "@variable" },
	["@lsp.type.property"] = { link = "@property" },
	["@lsp.type.enumMember"] = { link = "@constant" },
	["@lsp.type.function"] = { link = "@function" },
	["@lsp.type.method"] = { link = "@method" },
	["@lsp.type.macro"] = { link = "@macro" },
	["@lsp.type.decorator"] = { link = "@function" },
	["@lsp.typemod.variable.defaultLibrary"] = { link = "@constant" },
	["@lsp.typemod.parameter.readyonly"] = { link = "Italic" },
	["@lsp.typemod.variable.readonly"] = { link = "@constant" },
	["@lsp.typemod.variable.global"] = { link = "@constant" },
	["@lsp.typemod.keyword.documentation"] = { link = "@keyword" },
	["@lsp.typemod.class.documentation"] = { link = "@type" },
	["@lsp.typemod.property.readonly"] = { link = "@constant" },

	SignAdd = { fg = cl.sign_add, bg = cl.none },
	SignChange = { fg = cl.sign_change, bg = cl.none },
	SignDelete = { fg = cl.sign_delete, bg = cl.none },
	GitSignsAdd = { fg = cl.sign_add, bg = cl.none },
	GitSignsChange = { fg = cl.sign_change, bg = cl.none },
	GitSignsDelete = { fg = cl.sign_delete, bg = cl.none },
	GitSignsAddInline = { fg = cl.green, bg = cl.none },
	GitSignsChangeInline = { fg = cl.orange, bg = cl.none },
	GitSignsDeleteInline = { fg = cl.red, bg = cl.none },

	-- Navic
	NavicIconsFile = { fg = cl.fg, bg = cl.none },
	NavicIconsModule = { link = "@namespace" },
	NavicIconsNamespace = { link = "@namespace" },
	NavicIconsPackage = { link = "Directory" },
	NavicIconsClass = { link = "@type" },
	NavicIconsMethod = { link = "@method" },
	NavicIconsProperty = { link = "@property" },
	NavicIconsField = { link = "@field" },
	NavicIconsConstructor = { link = "@constructor" },
	NavicIconsEnum = { link = "@type" },
	NavicIconsInterface = { link = "@type" },
	NavicIconsFunction = { link = "@function" },
	NavicIconsVariable = { link = "@Variable" },
	NavicIconsConstant = { link = "@constant" },
	NavicIconsString = { link = "@string" },
	NavicIconsNumber = { link = "@number" },
	NavicIconsBoolean = { link = "@boolean" },
	NavicIconsArray = { link = "@keyword" },
	NavicIconsObject = { link = "@keyword" },
	NavicIconsKey = { link = "@keyword" },
	NavicIconsNull = { link = "@constant" },
	NavicIconsEnumMember = { link = "@constant" },
	NavicIconsStruct = { link = "Structure" },
	NavicIconsEvent = { link = "@function" },
	NavicIconsOperator = { link = "@operator" },
	NavicIconsTypeParameter = { link = "@type" },
	NavicText = { link = "@text" },
	NavicSeparator = { link = "@keyword" },

	-- CMP
	CmpItemAbbrDeprecated = { fg = cl.comment, bg = cl.none, strikethrough = true },
	CmpItemAbbrMatch = { fg = cl.error, bold = true },
	CmpItemAbbrMatchFuzzy = { fg = cl.black },
	CmpItemKindText = { link = "@string" },
	CmpItemKindMethod = { link = "@method" },
	CmpItemKindFunction = { link = "@function" },
	CmpItemKindConstructor = { link = "@constructor" },
	CmpItemKindField = { link = "@field" },
	CmpItemKindVariable = { link = "@variable" },
	CmpItemKindClass = { link = "@type" },
	CmpItemKindInterface = { link = "@type" },
	CmpItemKindModule = { link = "@namespace" },
	CmpItemKindProperty = { link = "@property" },
	CmpItemKindUnit = { link = "@number" },
	CmpItemKindValue = { link = "@string" },
	CmpItemKindEnum = { link = "@type" },
	CmpItemKindKeyword = { link = "@keyword" },
	CmpItemKindSnippet = { link = "@keyword" },
	CmpItemKindColor = { fg = cl.orange, bg = cl.none },
	CmpItemKindFile = { fg = cl.fg, bg = cl.none },
	CmpItemKindReference = { link = "@text.reference" },
	CmpItemKindFolder = { link = "Directory" },
	CmpItemKindEnumMember = { link = "@constant" },
	CmpItemKindConstant = { link = "@constant" },
	CmpItemKindStruct = { link = "Structure" },
	CmpItemKindEvent = { link = "@function" },
	CmpItemKindOperator = { link = "@operator" },
	CmpItemKindTypeParameter = { link = "@type" },

	WhichKey = { fg = cl.fg, bg = cl.none },
	WhichKeySeparator = { fg = cl.cyan, bg = cl.none },
	WhichKeyGroup = { fg = cl.green, bg = cl.none },
	WhichKeyDesc = { fg = cl.cyan, bg = cl.none },
	WhichKeyFloat = { link = "NormalFloat" },

	-- Neotree
	NeoTreeWinSeparator = { fg = cl.green },
	NeoTreeDirectoryIcon = { fg = cl.yellow },
	NeoTreeNormal = { link = "NormalFloat" },
	NeoTreeNormalNC = { link = "NormalFloat" },
	NeoTreeEndOfBuffer = { fg = cl.alt_bg, bg = cl.none },
	NeoTreeRootName = { link = "Directory" },
	NeoTreeFileName = { fg = cl.fg, bg = cl.none },
	NeoTreeFileNameOpened = { fg = cl.purple, bg = cl.none, bold = true },
	NeoTreeFloatBorder = { fg = cl.red },
	NeoTreeFloatTitle = { fg = cl.black, bg = cl.green, bold = true },
	NeoTreeGitAdded = { fg = cl.sign_add, bg = cl.none },
	NeoTreeGitConflict = { fg = cl.sign_change, bg = cl.none },
	NeoTreeGitDeleted = { fg = cl.sign_delete, bg = cl.none },
	NeoTreeGitIgnored = { fg = cl.comment, bg = cl.none, italic = true },
	NeoTreeGitModified = { fg = cl.sign_change, bg = cl.none },
	NeoTreeGitUnstaged = { fg = cl.sign_change, bg = cl.none },
	NeoTreeGitUntracked = { fg = cl.sign_change, bg = cl.none },
	NeoTreeGitStaged = { fg = cl.sign_add, bg = cl.none },
	NeoTreeIndentMarker = { fg = cl.comment, bg = cl.none },
}
